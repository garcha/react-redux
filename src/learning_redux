// import React from 'react';
// import ReactDOM from 'react-dom';
// import App from './App';
// import './index.css';
//
// ReactDOM.render(
//   <App />,
//   document.getElementById('root')
// );

//ajax calls with axios
// import { applyMiddleware, createStore } from "redux";
// import axios from "axios";
// import logger from "redux-logger";
// import thunk from "redux-thunk";
// import promise from 'redux-promise-middleware'
//
// const initialState = {
//   fetching: false,
//   fetched: false,
//   users: [],
//   error: null,
// };
//
// const reducer = (state=initialState, action) => {
//   switch(action.type){
//     case 'FETCH_USERS_PENDINGT': {
//       return {...state, fetching: true}
//       break;
//     }
//     case 'FETCH_USERS_REJECTED': {
//       return {...state, fetching: false, error: action.payload}
//       break;
//     }
//     case 'RECIEVE_USERS_FULFILLED': {
//       return {
//         ...state,
//         fetching: false,
//         fetched: true,
//         users: action.payload,
//       }
//       break;
//     }
//   }
//   return state
// }
//
// const middleware = applyMiddleware(promise(), thunk, logger)
// const store = createStore(reducer, middleware)
//
// //with promise
// store.dispatch({
//   type: 'FETCH_USER',
//   payload: axios.get("http://rest.learncode.academy/api/wstern/users")
// })

//with thunk
// store.dispatch((dispatch) => {
//   dispatch({type: 'FETCH_USERS_START'})
//   axios.get("http://rest.learncode.academy/api/wstern/users")
//     .then((response) => {
//       dispatch({type: 'RECIEVE_USERS', payload: response.data})
//     })
//     .catch((err) => {
//       dispatch({type: 'FETCH_USERS_ERROR', payload: err})
//     })
//   //do something async
// })



//Add middleware
// import {applyMiddleware, createStore } from 'redux';
//
// const reducer = (initialState=0, action) => {
//   if(action.type === 'INC') {
//     return initialState + 1;
//   }else if(action.type === 'DEC') {
//     return initialState - 1;
//   }else if(action.type === 'E') {
//     throw new Error('testing')
//   }
//   return initialState;
// }
//
// const logger = (store) => (next) => (action) => {
//   console.log('action fired', action);
//   next(action)
// }
//
// const error = (store) => (next) => (action) => {
//   try{
//     next(action);
//   } catch(e){
//     console.log("catch Error", e)
//   }
// }
//
// const middleware = applyMiddleware(logger, error);
// const store = createStore(reducer, 1, middleware)
//
// store.subscribe(() => {
//   console.log("store changed", store.getState())
// })
//
// store.dispatch({type: 'INC'})
// store.dispatch({type: 'INC'})
// store.dispatch({type: 'INC'})
// store.dispatch({type: 'DEC'})
// store.dispatch({type: 'INC'})
// store.dispatch({type: 'E'})


//multiple reducers
// import { combineReducers, createStore } from "redux";
//
// const userReducer = (state={}, action) => {
//   //const newState = {...state};
//   switch(action.type){
//     case 'CHANGE_NAME': {
//       state = {...state, name: action.payload};
//       break;
//     }
//     case 'CHANGE_AGE': {
//       state = {...state, age: action.payload}
//       break;
//     }
//   }
//   //return newState; one way to do return it
//   return state;
// };
//
// const tweetsReducer = (state=[], action) => {
//
//   return state;
// };
//
// const reducers = combineReducers({
//   user: userReducer,
//   tweets: tweetsReducer,
// });
//
// const store = createStore(reducers);
//
// store.subscribe(() => {
//   console.log("store changed", store.getState())
// })
//
// store.dispatch({type: 'CHANGE_NAME', payload: 'Jazz'})
// store.dispatch({type: 'CHANGE_AGE', payload: 31})
// store.dispatch({type: 'CHANGE_AGE', payload: 32})


//single reducer
// const store = createStore(reducer, {
//   user: {
//     name: 'Jazz',
//     age: 31
//   },
//   tweets: []
// });
// const reducer = function(state, action) {
//   if(action.type === 'INC') {
//     return state + action.payload;
//   }
//   if(action.type === 'DEC') {
//     return state - action.payload;
//   }
//   return state;
// }
//
// const store = createStore(reducer, 0)
// store.subscribe(() => {
//   console.log("store changed", store.getState())
// })
// store.dispatch({type: 'INC', payload: 22})
// store.dispatch({type: 'INC', payload: 1})
// store.dispatch({type: 'DEC', payload: 1000})
